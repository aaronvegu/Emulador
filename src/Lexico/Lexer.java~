/* The following code was generated by JFlex 1.6.1 */

/*
Traductores de lenguajes 2023B
CUTonala - INGC

Analizador lexico para el lenguaje PyEsp
Integrantes:
- Velazquez Gurrola Jesus Joseph Aaron
- Ortiz Nava Eliseo 
*/
package Lexico;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/aaronvegu/IdeaProjects/Emulador/src/Lexico/PyEsp.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;
  public static final int COMENTARIO_LINEA = 6;
  public static final int COMENTARIO_MULTILINEA = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\45\10\0\1\4\1\50\1\2\1\2\1\2\22\0\1\44\1\40"+
    "\1\3\1\1\1\0\1\0\1\0\1\47\1\41\1\41\1\34\1\34"+
    "\1\0\1\35\1\6\1\36\12\5\1\0\1\0\1\40\1\37\1\40"+
    "\2\0\5\7\1\30\7\7\1\32\7\7\1\26\4\7\1\42\1\33"+
    "\1\43\1\0\1\7\1\0\1\20\1\7\1\25\1\27\1\15\1\23"+
    "\1\7\1\22\1\11\2\7\1\31\1\14\1\12\1\13\1\21\1\7"+
    "\1\17\1\10\1\16\1\24\3\7\1\7\1\7\1\41\1\0\1\41"+
    "\7\0\1\2\u1fa2\0\1\2\1\2\udfd5\0\1\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\20\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\24\2\1\7\1\10\1\11\1\12\24\11\25\13\1\14"+
    "\1\1\1\15\26\16\2\0\1\17\1\0\1\20\1\21"+
    "\1\20\1\22\1\20\1\23\1\24\13\20\1\25\1\26"+
    "\1\27\1\30\1\31\2\0\1\32\1\33\2\20\1\0"+
    "\20\20\1\34\1\0\1\35\1\20\1\0\3\20\1\36"+
    "\4\20\1\37\5\20\1\40\1\41\1\0\1\20\1\23"+
    "\1\24\2\20\1\42\1\43\1\44\2\20\1\45\1\20"+
    "\1\46\1\20\1\47\6\20\1\50\2\20\1\51\1\52"+
    "\2\20\1\53\1\54\1\55\1\20\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\315"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386"+
    "\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\315\0\315"+
    "\0\315\0\315\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386"+
    "\0\u03af\0\u03d8\0\u0401\0\u04a5\0\u0453\0\u047c\0\315\0\u0171"+
    "\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267\0\u0290\0\u02b9"+
    "\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401"+
    "\0\u042a\0\u0453\0\u047c\0\315\0\u04ce\0\315\0\315\0\u04f7"+
    "\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267\0\u0290"+
    "\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8"+
    "\0\u0401\0\u042a\0\u0453\0\u047c\0\u0520\0\u0549\0\u0171\0\u0572"+
    "\0\u019a\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u019a\0\u019a\0\u063f"+
    "\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787"+
    "\0\u07b0\0\u07d9\0\315\0\315\0\315\0\315\0\315\0\u0802"+
    "\0\u082b\0\315\0\u0572\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8"+
    "\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40"+
    "\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\315\0\u0b5f"+
    "\0\u019a\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u019a\0\u0c55"+
    "\0\u0c7e\0\u0ca7\0\u0cd0\0\u019a\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74"+
    "\0\u0d9d\0\u019a\0\u019a\0\u0dc6\0\u0def\0\315\0\315\0\u0e18"+
    "\0\u0e41\0\u019a\0\u019a\0\u019a\0\u0e6a\0\u0e93\0\u019a\0\u0ebc"+
    "\0\u019a\0\u0ee5\0\u019a\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2"+
    "\0\u0fdb\0\u019a\0\u1004\0\u102d\0\u019a\0\u019a\0\u1056\0\u107f"+
    "\0\u019a\0\u019a\0\u019a\0\u10a8\0\u019a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\6\1\14"+
    "\1\15\1\16\1\17\1\14\1\20\1\21\1\14\1\22"+
    "\1\14\1\23\1\24\1\25\1\14\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\3\35\2\36\3\6\1\12"+
    "\2\6\1\37\1\40\2\41\1\10\1\42\1\41\1\43"+
    "\1\41\1\44\1\45\1\46\1\47\1\44\1\50\1\51"+
    "\1\44\1\52\1\44\1\53\1\54\1\55\1\44\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\3\65\2\66"+
    "\7\41\1\10\2\67\1\10\2\67\1\70\1\67\1\71"+
    "\1\72\1\73\1\74\1\71\1\75\1\76\1\71\1\77"+
    "\1\71\1\100\1\101\1\102\1\71\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\3\112\2\113\6\67\1\114"+
    "\1\10\50\115\1\116\2\117\1\10\1\120\1\117\1\121"+
    "\1\117\1\122\1\123\1\124\1\125\1\122\1\126\1\127"+
    "\1\122\1\130\1\122\1\131\1\132\1\133\1\122\1\134"+
    "\1\135\1\136\1\137\1\140\1\141\1\142\3\143\2\144"+
    "\7\117\1\10\113\0\1\145\11\0\1\146\51\0\1\12"+
    "\37\0\1\12\11\0\1\147\1\150\47\0\1\151\1\0"+
    "\24\151\23\0\1\151\1\0\2\151\1\152\21\151\23\0"+
    "\1\151\1\0\5\151\1\153\16\151\23\0\1\151\1\0"+
    "\4\151\1\154\17\151\23\0\1\151\1\0\2\151\1\155"+
    "\21\151\23\0\1\151\1\0\1\151\1\156\1\151\1\157"+
    "\20\151\23\0\1\151\1\0\6\151\1\160\15\151\23\0"+
    "\1\151\1\0\11\151\1\161\12\151\23\0\1\151\1\0"+
    "\11\151\1\162\12\151\23\0\1\151\1\0\15\151\1\163"+
    "\6\151\23\0\1\151\1\0\4\151\1\164\15\151\1\165"+
    "\1\151\23\0\1\151\1\0\6\151\1\166\15\151\23\0"+
    "\1\151\1\0\6\151\1\167\15\151\23\0\1\151\1\0"+
    "\11\151\1\170\12\151\23\0\1\151\1\0\6\151\1\171"+
    "\15\151\23\0\1\151\1\0\15\151\1\172\6\151\52\0"+
    "\1\173\4\0\3\174\44\0\1\175\50\0\1\176\23\0"+
    "\1\177\21\0\1\173\4\0\3\174\5\0\50\115\4\0"+
    "\1\200\112\0\1\201\6\0\1\202\52\0\1\203\50\0"+
    "\1\151\1\0\3\151\1\204\20\151\23\0\1\151\1\0"+
    "\12\151\1\205\11\151\23\0\1\151\1\0\24\151\11\0"+
    "\1\206\11\0\1\151\1\0\6\151\1\207\15\151\23\0"+
    "\1\151\1\0\7\151\1\210\14\151\23\0\1\151\1\0"+
    "\1\151\1\211\6\151\1\212\4\151\1\213\6\151\23\0"+
    "\1\151\1\0\1\151\1\214\22\151\23\0\1\151\1\0"+
    "\3\151\1\215\20\151\23\0\1\151\1\0\3\151\1\216"+
    "\1\151\1\217\16\151\23\0\1\151\1\0\11\151\1\220"+
    "\12\151\23\0\1\151\1\0\10\151\1\221\13\151\23\0"+
    "\1\151\1\0\1\151\1\222\12\151\1\223\7\151\23\0"+
    "\1\151\1\0\22\151\1\224\1\151\23\0\1\151\1\0"+
    "\6\151\1\225\15\151\23\0\1\151\1\0\22\151\1\226"+
    "\1\151\21\0\1\227\102\0\1\230\20\0\1\151\1\0"+
    "\4\151\1\231\17\151\23\0\1\151\1\0\10\151\1\232"+
    "\13\151\33\0\1\233\40\0\1\151\1\0\3\151\1\234"+
    "\20\151\23\0\1\151\1\0\4\151\1\235\17\151\23\0"+
    "\1\151\1\0\11\151\1\236\12\151\23\0\1\151\1\0"+
    "\11\151\1\237\12\151\23\0\1\151\1\0\1\151\1\240"+
    "\22\151\23\0\1\151\1\0\7\151\1\241\14\151\23\0"+
    "\1\151\1\0\16\151\1\242\5\151\23\0\1\151\1\0"+
    "\7\151\1\243\14\151\23\0\1\151\1\0\4\151\1\244"+
    "\17\151\23\0\1\151\1\0\1\151\1\245\22\151\23\0"+
    "\1\151\1\0\20\151\1\246\3\151\23\0\1\151\1\0"+
    "\20\151\1\247\3\151\23\0\1\151\1\0\2\151\1\250"+
    "\21\151\23\0\1\151\1\0\1\151\1\251\22\151\23\0"+
    "\1\151\1\0\10\151\1\252\13\151\23\0\1\151\1\0"+
    "\4\151\1\253\17\151\64\0\1\254\7\0\1\151\1\0"+
    "\2\151\1\255\21\151\26\0\1\256\1\0\1\257\43\0"+
    "\1\151\1\0\7\151\1\260\14\151\23\0\1\151\1\0"+
    "\10\151\1\261\13\151\23\0\1\151\1\0\10\151\1\262"+
    "\13\151\23\0\1\151\1\0\11\151\1\263\12\151\23\0"+
    "\1\151\1\0\11\151\1\264\12\151\23\0\1\151\1\0"+
    "\2\151\1\265\21\151\23\0\1\151\1\0\2\151\1\266"+
    "\21\151\23\0\1\151\1\0\6\151\1\267\15\151\23\0"+
    "\1\151\1\0\11\151\1\270\12\151\23\0\1\151\1\0"+
    "\6\151\1\271\15\151\23\0\1\151\1\0\3\151\1\272"+
    "\20\151\23\0\1\151\1\0\4\151\1\273\17\151\61\0"+
    "\1\7\12\0\1\151\1\0\5\151\1\274\16\151\23\0"+
    "\1\151\1\0\10\151\1\275\13\151\23\0\1\151\1\0"+
    "\3\151\1\276\20\151\23\0\1\151\1\0\4\151\1\277"+
    "\17\151\23\0\1\151\1\0\3\151\1\300\20\151\23\0"+
    "\1\151\1\0\20\151\1\301\3\151\23\0\1\151\1\0"+
    "\6\151\1\302\15\151\23\0\1\151\1\0\2\151\1\303"+
    "\21\151\23\0\1\151\1\0\11\151\1\304\12\151\23\0"+
    "\1\151\1\0\4\151\1\305\17\151\23\0\1\151\1\0"+
    "\3\151\1\306\20\151\23\0\1\151\1\0\15\151\1\307"+
    "\6\151\23\0\1\151\1\0\6\151\1\310\15\151\23\0"+
    "\1\151\1\0\10\151\1\311\13\151\23\0\1\151\1\0"+
    "\1\151\1\312\22\151\23\0\1\151\1\0\11\151\1\313"+
    "\12\151\23\0\1\151\1\0\10\151\1\314\13\151\23\0"+
    "\1\151\1\0\4\151\1\315\17\151\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4305];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\0\1\11\1\1\1\11\26\1\4\11"+
    "\24\1\1\11\24\1\1\11\1\1\2\11\25\1\2\0"+
    "\1\1\1\0\22\1\5\11\2\0\1\11\3\1\1\0"+
    "\20\1\1\11\1\0\2\1\1\0\20\1\1\0\1\1"+
    "\2\11\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
      StringBuffer string = new StringBuffer();

      private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
      }
      private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Continue scanning single-line comment content */
            }
          case 47: break;
          case 2: 
            { /* Ignore other characters */
            }
          case 48: break;
          case 3: 
            { /* Ignore the # character for comments */
            }
          case 49: break;
          case 4: 
            { throw new Error("Illegal character <"+yytext()+">");
            }
          case 50: break;
          case 5: 
            { yybegin(STRING);
            }
          case 51: break;
          case 6: 
            { /* Ignore spaces and tabs */
            }
          case 52: break;
          case 7: 
            { yybegin(CHAR);
            }
          case 53: break;
          case 8: 
            { /* Ignore newlines in the initial state */
            }
          case 54: break;
          case 9: 
            { /* Continue scanning string content */
            }
          case 55: break;
          case 10: 
            { yybegin(YYINITIAL); return new Symbol(sym.TOKEN_CADENA, yytext());
            }
          case 56: break;
          case 11: 
            { /* Continue scanning character content */
            }
          case 57: break;
          case 12: 
            { yybegin(YYINITIAL); return new Symbol(sym.TOKEN_CARACTER, yytext());
            }
          case 58: break;
          case 13: 
            { yybegin(YYINITIAL); /* Exit single-line comment mode */
            }
          case 59: break;
          case 14: 
            { /* Continue scanning comment content */
            }
          case 60: break;
          case 15: 
            { return new Symbol(sym.TOKEN_ENTERO, yytext());
            }
          case 61: break;
          case 16: 
            { return new Symbol(sym.TOKEN_IDENTIFICADOR, yytext());
            }
          case 62: break;
          case 17: 
            { return new Symbol(sym.TOKEN_SI, yytext());
            }
          case 63: break;
          case 18: 
            { return new Symbol(sym.TOKEN_LOGICO, yytext());
            }
          case 64: break;
          case 19: 
            { return new Symbol(sym.TOKEN_IDENTIDAD, yytext());
            }
          case 65: break;
          case 20: 
            { return new Symbol(sym.TOKEN_PERTENENCIA, yytext());
            }
          case 66: break;
          case 21: 
            { return new Symbol(sym.TOKEN_ARITMETICO, yytext());
            }
          case 67: break;
          case 22: 
            { return new Symbol(sym.TOKEN_AGRUPACION, yytext());
            }
          case 68: break;
          case 23: 
            { return new Symbol(sym.TOKEN_ASIGNACION, yytext());
            }
          case 69: break;
          case 24: 
            { return new Symbol(sym.TOKEN_COMPARACION, yytext());
            }
          case 70: break;
          case 25: 
            { /* Ignore escaped newline in string */
            }
          case 71: break;
          case 26: 
            { yybegin(COMENTARIO_MULTILINEA); /* Enter multiline comment mode */
            }
          case 72: break;
          case 27: 
            { return new Symbol(sym.TOKEN_REAL, yytext());
            }
          case 73: break;
          case 28: 
            { yybegin(YYINITIAL); /* Exit multiline comment mode */
            }
          case 74: break;
          case 29: 
            { return new Symbol(sym.TOKEN_SINO, yytext());
            }
          case 75: break;
          case 30: 
            { return new Symbol(sym.TOKEN_PARA, yytext());
            }
          case 76: break;
          case 31: 
            { return new Symbol(sym.TOKEN_COMO, yytext());
            }
          case 77: break;
          case 32: 
            { return new Symbol(sym.TOKEN_LEER, yytext());
            }
          case 78: break;
          case 33: 
            { return new Symbol(sym.TOKEN_NULO, yytext());
            }
          case 79: break;
          case 34: 
            { return new Symbol(sym.TOKEN_PASAR, yytext());
            }
          case 80: break;
          case 35: 
            { return new Symbol(sym.TOKEN_PAUSA, yytext());
            }
          case 81: break;
          case 36: 
            { return new Symbol(sym.TOKEN_HASTA, yytext());
            }
          case 82: break;
          case 37: 
            { return new Symbol(sym.TOKEN_CLASE, yytext());
            }
          case 83: break;
          case 38: 
            { return new Symbol(sym.TOKEN_DESDE, yytext());
            }
          case 84: break;
          case 39: 
            { return new Symbol(sym.TOKEN_FALSO, yytext());
            }
          case 85: break;
          case 40: 
            { return new Symbol(sym.TOKEN_DEFINE, yytext());
            }
          case 86: break;
          case 41: 
            { return new Symbol(sym.TOKEN_RETORNO, yytext());
            }
          case 87: break;
          case 42: 
            { return new Symbol(sym.TOKEN_FUNCION, yytext());
            }
          case 88: break;
          case 43: 
            { return new Symbol(sym.TOKEN_IMPRIMIR, yytext());
            }
          case 89: break;
          case 44: 
            { return new Symbol(sym.TOKEN_MIENTRAS, yytext());
            }
          case 90: break;
          case 45: 
            { return new Symbol(sym.TOKEN_CONTINUA, yytext());
            }
          case 91: break;
          case 46: 
            { return new Symbol(sym.TOKEN_VERDADERO, yytext());
            }
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
